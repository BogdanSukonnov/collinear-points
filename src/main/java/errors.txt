ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (3 warnings)
PMD:          FAILED (1 warning)
Checkstyle:   PASSED

Correctness:  16/41 tests passed
Memory:       1/1 tests passed
Timing:       8/41 tests passed

Aggregate score: 47.32%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.7K Mar 30 07:36 BruteCollinearPoints.java
5.0K Mar 30 07:36 FastCollinearPoints.java
4.9K Mar 30 07:36 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 Point.java
*-----------------------------------------------------------

% javac11 LineSegment.java
*-----------------------------------------------------------

% javac11 BruteCollinearPoints.java
*-----------------------------------------------------------

% javac11 FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 46]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'isPointUsed()' is never called.  At FastCollinearPoints.java:[lines 69-77]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 48]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
FastCollinearPoints.java:68: Avoid unused private methods, such as 'isPointUsed(Point,Stack)'. [UnusedPrivateMethod]
PMD ends with 1 warning.


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    - segments() contains the same segment more than once
    - segment 0: (14000, 15000) -> (6000, 7000)
    - segment 3: (14000, 15000) -> (6000, 7000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6000, 7000) -> (14000, 15000)
    - reference segment 1: (3000, 4000) -> (6000, 7000) -> (14000, 15000) -> (20000, 21000)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 2
    - 22 extra entries in student solution, including:
      '(20000, 21000) -> (14000, 15000)'


  * filename = equidistant.txt
    - segments() contains the same segment more than once
    - segment 0: (5000, 12000) -> (9000, 6000)
    - segment 3: (5000, 12000) -> (9000, 6000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 6000) -> (5000, 12000)
    - reference segment 0: (13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)

    - number of entries in student   solution: 48
    - number of entries in reference solution: 4
    - 44 extra entries in student solution, including:
      '(10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - segments() contains the same segment more than once
    - segment 0: (2000, 29000) -> (4000, 29000)
    - segment 6: (2000, 29000) -> (4000, 29000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4000, 29000) -> (2000, 29000)
    - reference segment 2: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)

    - number of entries in student   solution: 48
    - number of entries in reference solution: 4
    - 44 extra entries in student solution, including:
      '(28000, 29000) -> (22000, 29000)'


  * filename = input48.txt
    - segments() contains the same segment more than once
    - segment 0: (16000, 22000) -> (9000, 1000)
    - segment 12: (16000, 22000) -> (9000, 1000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (9000, 1000) -> (15000, 19000)
    - reference segment 3: (9000, 1000) -> (12000, 10000) -> (15000, 19000) -> (16000, 22000)

    - number of entries in student   solution: 72
    - number of entries in reference solution: 6
    - 66 extra entries in student solution, including:
      '(19000, 28000) -> (18000, 26000)'


==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains the same segment more than once
    - segment 0: (20385, 12711) -> (18177, 12711)
    - segment 3: (20385, 12711) -> (18177, 12711)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (18177, 12711) -> (20385, 12711)
    - reference segment 3: (10375, 12711) -> (14226, 12711) -> (18177, 12711) -> (20385, 12711)

    - number of entries in student   solution: 60
    - number of entries in reference solution: 5
    - 55 extra entries in student solution, including:
      '(7453, 14118) -> (7821, 14118)'


  * filename = horizontal25.txt
    - segments() contains the same segment more than once
    - segment 0: (20732, 15282) -> (12774, 15282)
    - segment 3: (20732, 15282) -> (12774, 15282)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (12774, 15282) -> (15884, 15282)
    - reference segment 15: (12774, 15282) -> (15472, 15282) -> (15884, 15282) -> (20732, 15282)

    - number of entries in student   solution: 300
    - number of entries in reference solution: 25
    - 275 extra entries in student solution, including:
      '(16352, 20913) -> (19666, 20913)'


==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains the same segment more than once
    - segment 0: (15945, 3735) -> (8743, 3735)
    - segment 3: (15945, 3735) -> (8743, 3735)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8743, 3735) -> (15945, 3735)
    - reference segment 0: (7691, 3735) -> (8743, 3735) -> (15945, 3735) -> (16025, 3735)

    - number of entries in student   solution: 12
    - number of entries in reference solution: 1
    - 11 extra entries in student solution, including:
      '(16025, 3735) -> (15945, 3735)'


    - failed on trial 1 of 500
     4
      7691  3735
     16025  3735
     15945  3735
      8743  3735

  *  5 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 6: (16152, 9512) -> (10361, 9512)
    - segment 9: (16152, 9512) -> (10361, 9512)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11389, 2555) -> (16518, 2555)
    - reference segment 1: (9268, 2555) -> (11389, 2555) -> (12521, 2555) -> (16518, 2555)

    - number of entries in student   solution: 60
    - number of entries in reference solution: 5
    - 55 extra entries in student solution, including:
      '(16152, 9512) -> (10361, 9512)'


    - failed on trial 1 of 250
     20
     13631  4545
      6812  9512
      1569  1080
      9268  2555
     16958  4545
     14540  4545
      6574  9486
     12521  2555
      1748  1080
      2252  9486
     16518  2555
      7552  1080
      1220  9512
     17079  1080
      5810  4545
      8970  9486
     16152  9512
     10361  9512
     16641  9486
     11389  2555

  * 10 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 3: (6900, 19301) -> (6143, 19301)
    - segment 12: (6900, 19301) -> (6143, 19301)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1834, 10210) -> (3340, 10210)
    - reference segment 4: (1834, 10210) -> (3340, 10210) -> (8065, 10210) -> (16842, 10210)

    - number of entries in student   solution: 120
    - number of entries in reference solution: 10
    - 110 extra entries in student solution, including:
      '(12387, 19442) -> (17591, 19442)'


    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 0: (9223, 4263) -> (4912, 4263)
    - segment 3: (9223, 4263) -> (4912, 4263)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4912, 4263) -> (9223, 4263)
    - reference segment 2: (3009, 4263) -> (4912, 4263) -> (9223, 4263) -> (18544, 4263)

    - number of entries in student   solution: 180
    - number of entries in reference solution: 15
    - 165 extra entries in student solution, including:
      '(19472, 20655) -> (8373, 20655)'


    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains the same segment more than once
    - segment 0: (8421, 1829) -> (8421, 18715)
    - segment 3: (8421, 1829) -> (8421, 18715)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (8421, 18715) -> (8421, 11344)
    - reference segment 2: (8421, 1829) -> (8421, 11344) -> (8421, 15144) -> (8421, 18715)

    - number of entries in student   solution: 60
    - number of entries in reference solution: 5
    - 55 extra entries in student solution, including:
      '(14407, 19953) -> (14407, 17831)'


  * filename = vertical25.txt
    - segments() contains the same segment more than once
    - segment 0: (19953, 10489) -> (19953, 10688)
    - segment 3: (19953, 10489) -> (19953, 10688)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (19953, 10688) -> (19953, 10489)
    - reference segment 23: (19953, 10489) -> (19953, 10688) -> (19953, 19299) -> (19953, 20439)

    - number of entries in student   solution: 300
    - number of entries in reference solution: 25
    - 275 extra entries in student solution, including:
      '(1825, 19478) -> (1825, 19680)'


==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - segments() contains the same segment more than once
    - segment 0: (17455, 12255) -> (17455, 12211)
    - segment 3: (17455, 12255) -> (17455, 12211)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (17455, 12211) -> (17455, 12255)
    - reference segment 0: (17455, 3140) -> (17455, 12211) -> (17455, 12255) -> (17455, 13851)

    - number of entries in student   solution: 12
    - number of entries in reference solution: 1
    - 11 extra entries in student solution, including:
      '(17455, 13851) -> (17455, 12255)'


    - failed on trial 1 of 500
     4
     17455 13851
     17455  3140
     17455 12255
     17455 12211

  *  5 random vertical line segments
    - segments() contains the same segment more than once
    - segment 0: (6974, 15439) -> (6974, 4196)
    - segment 12: (6974, 15439) -> (6974, 4196)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6974, 4196) -> (6974, 15439)
    - reference segment 2: (6974, 1403) -> (6974, 4196) -> (6974, 5189) -> (6974, 15439)

    - number of entries in student   solution: 60
    - number of entries in reference solution: 5
    - 55 extra entries in student solution, including:
      '(4381, 17889) -> (4381, 20153)'


    - failed on trial 1 of 250
     20
      4381 13531
     12931  3881
     12931  9457
     13433 13732
     12931 14881
     12931 10397
      4381 17889
      4381  8041
      6974  5189
      1184 11929
      6974  1403
      1184  7922
     13433  5504
      1184 14114
     13433 15440
      6974 15439
      1184 12246
      4381 20153
     13433 11298
      6974  4196

  * 10 random vertical line segments
    - segments() contains the same segment more than once
    - segment 3: (1964, 15607) -> (1964, 18027)
    - segment 6: (1964, 15607) -> (1964, 18027)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13588, 15014) -> (13588, 6047)
    - reference segment 6: (13588, 1829) -> (13588, 6047) -> (13588, 8384) -> (13588, 15014)

    - number of entries in student   solution: 120
    - number of entries in reference solution: 10
    - 110 extra entries in student solution, including:
      '(13495, 16444) -> (13495, 17644)'


    - failed on trial 1 of 50

  * 15 random vertical line segments
    - segments() contains the same segment more than once
    - segment 3: (11054, 18764) -> (11054, 11301)
    - segment 9: (11054, 18764) -> (11054, 11301)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (4016, 15618) -> (4016, 13256)
    - reference segment 2: (4016, 6634) -> (4016, 12276) -> (4016, 13256) -> (4016, 15618)

    - number of entries in student   solution: 180
    - number of entries in reference solution: 15
    - 165 extra entries in student solution, including:
      '(20048, 18742) -> (20048, 19474)'


    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - segments() contains the same segment more than once
    - segment 0: (5000, 12000) -> (9000, 6000)
    - segment 3: (5000, 12000) -> (9000, 6000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 6000) -> (5000, 12000)
    - reference segment 0: (13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)

    - number of entries in student   solution: 48
    - number of entries in reference solution: 4
    - 44 extra entries in student solution, including:
      '(10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - segments() contains the same segment more than once
    - segment 0: (2000, 29000) -> (4000, 29000)
    - segment 6: (2000, 29000) -> (4000, 29000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4000, 29000) -> (2000, 29000)
    - reference segment 2: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)

    - number of entries in student   solution: 48
    - number of entries in reference solution: 4
    - 44 extra entries in student solution, including:
      '(28000, 29000) -> (22000, 29000)'


  * filename = input48.txt
    - segments() contains the same segment more than once
    - segment 0: (16000, 22000) -> (9000, 1000)
    - segment 12: (16000, 22000) -> (9000, 1000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (9000, 1000) -> (15000, 19000)
    - reference segment 3: (9000, 1000) -> (12000, 10000) -> (15000, 19000) -> (16000, 22000)

    - number of entries in student   solution: 72
    - number of entries in reference solution: 6
    - 66 extra entries in student solution, including:
      '(19000, 28000) -> (18000, 26000)'


==> FAILED

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10000, 0) -> (8000, 2000)
    - reference segment 1: (10000, 0) -> (8000, 2000) -> (2000, 8000) -> (0, 10000)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 1 extra entry in student solution:
      '(10000, 0) -> (8000, 2000)'

    - 4 missing entries in student solution, including:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 17000) -> (1000, 27000)
    - reference segment 3: (1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 1 extra entry in student solution:
      '(1000, 17000) -> (1000, 27000)'

    - 4 missing entries in student solution, including:
      '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (24000, 23000) -> (18000, 23000)
    - reference segment 0: (1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 6
    - 1 extra entry in student solution:
      '(24000, 23000) -> (18000, 23000)'

    - 6 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'



It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
    - segments() contains the same segment more than once
    - segment 0: (10069, 9425) -> (8004, 5885)
    - segment 3: (10069, 9425) -> (8004, 5885)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8004, 5885) -> (10069, 9425)
    - reference segment 0: (8004, 5885) -> (10069, 9425) -> (10482, 10133) -> (10895, 10841)

    - number of entries in student   solution: 12
    - number of entries in reference solution: 1
    - 11 extra entries in student solution, including:
      '(10482, 10133) -> (10895, 10841)'


    - failed on trial 1 of 500
     4
     10482 10133
     10895 10841
     10069  9425
      8004  5885

  *  5 random line segments
    - segments() contains the same segment more than once
    - segment 6: (11589, 13634) -> (13097, 15438)
    - segment 9: (11589, 13634) -> (13097, 15438)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7343, 3360) -> (6933, 1665)
    - reference segment 3: (6933, 1665) -> (7343, 3360) -> (7425, 3699) -> (7507, 4038)

    - number of entries in student   solution: 60
    - number of entries in reference solution: 5
    - 55 extra entries in student solution, including:
      '(12652, 18800) -> (8032, 15698)'


    - failed on trial 1 of 250
     20
      7425  3699
      9061 12480
      4024  2084
      1787  1908
      4952 13630
     12652 18800
      2642 12079
     11198 10231
     11828 19901
      7507  4038
      4243  2536
     11009  7330
      6933  1665
     11261 11198
     10594 15644
      4803  5516
     11589 13634
     13097 15438
      8032 15698
      7343  3360

  * 10 random line segments
    - segments() contains the same segment more than once
    - segment 9: (6876, 12541) -> (496, 7921)
    - segment 18: (6876, 12541) -> (496, 7921)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8836, 6769) -> (8374, 2884)
    - reference segment 9: (8374, 2884) -> (8836, 6769) -> (9430, 11764) -> (10156, 17869)

    - number of entries in student   solution: 120
    - number of entries in reference solution: 10
    - 110 extra entries in student solution, including:
      '(9358, 19886) -> (9255, 19102)'


    - failed on trial 1 of 100

  * 15 random line segments
    - segments() contains the same segment more than once
    - segment 9: (4086, 4745) -> (12022, 5681)
    - segment 18: (4086, 4745) -> (12022, 5681)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6973, 10255) -> (8408, 16261)
    - reference segment 10: (5128, 2533) -> (6973, 10255) -> (7588, 12829) -> (8408, 16261)

    - number of entries in student   solution: 180
    - number of entries in reference solution: 15
    - 165 extra entries in student solution, including:
      '(11304, 17431) -> (9598, 16401)'


    - failed on trial 1 of 50

==> FAILED

Test 9: random line segments
  *  1 random line segment
    - segments() contains the same segment more than once
    - segment 0: (5202, 8415) -> (3752, 8415)
    - segment 3: (5202, 8415) -> (3752, 8415)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (3752, 8415) -> (5202, 8415)
    - reference segment 0: (3752, 8415) -> (5202, 8415) -> (5852, 8415) -> (6652, 8415)

    - number of entries in student   solution: 12
    - number of entries in reference solution: 1
    - 11 extra entries in student solution, including:
      '(6652, 8415) -> (5852, 8415)'


    - failed on trial 1 of 500
     4
      6652  8415
      5852  8415
      5202  8415
      3752  8415

  *  5 random line segments
    - segments() contains the same segment more than once
    - segment 3: (11032, 7287) -> (10927, 6902)
    - segment 9: (11032, 7287) -> (10927, 6902)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14807, 5858) -> (14887, 8418)
    - reference segment 4: (14807, 5858) -> (14833, 6690) -> (14887, 8418) -> (14888, 8450)

    - number of entries in student   solution: 60
    - number of entries in reference solution: 5
    - 55 extra entries in student solution, including:
      '(12360, 10457) -> (12468, 10643)'


    - failed on trial 1 of 250
     20
      5882 11431
     14888  8450
      6866  3962
     11460  8907
      9940  3283
      5558  8812
     11095  7518
     12360 10457
     14833  6690
      5342  7066
     13586 10850
     14887  8418
      7346  4454
     11266  8472
     12468 10643
      5402  7551
     11032  7287
     11100  8287
     10927  6902
     14807  5858

  * 10 random line segments
    - segments() contains the same segment more than once
    - segment 12: (6026, 1722) -> (7566, 3322)
    - segment 15: (6026, 1722) -> (7566, 3322)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9951, 6261) -> (12586, 7439)
    - reference segment 1: (9951, 6261) -> (12586, 7439) -> (14456, 8275) -> (15051, 8541)

    - number of entries in student   solution: 120
    - number of entries in reference solution: 10
    - 110 extra entries in student solution, including:
      '(14391, 12679) -> (14309, 12515)'


    - failed on trial 1 of 100

  * 15 random line segments
    - segments() contains the same segment more than once
    - segment 3: (4613, 7167) -> (5763, 7167)
    - segment 21: (4613, 7167) -> (5763, 7167)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2944, 9815) -> (7884, 11765)
    - reference segment 4: (2944, 9815) -> (5680, 10895) -> (7884, 11765) -> (8188, 11885)

    - number of entries in student   solution: 180
    - number of entries in reference solution: 15
    - 165 extra entries in student solution, including:
      '(5867, 13443) -> (7106, 14850)'


    - failed on trial 1 of 50

==> FAILED

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     14737 19128
     22644 20667
      5846 13129
     16406  4511
      9521  8653
     17024 17767
     15465  2071
     25790 30151
     null
     12472 16363

  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     4
     26064  9005
     null
     11897 17102
     32538 32384

  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> FAILED

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
    - failed on trial 1 of 5
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

  * 25 points
    - failed on trial 1 of 10
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

  * 5 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points
     5
     30629  9826
     32049  1813
     32049  1813
     27222 18035
     10900 25083

  * 4 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points
     4
     26504  8704
      3357 16191
      3357 16191
     18107 21582

  * 3 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points
     3
     27530 15334
     27530 15334
      4946 21762

  * 2 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points
     2
     23590 14831
     23590 14831

==> FAILED


Total: 6/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(18000, 13000) -> (18000, 23000) -> (18000, 26000) -> (18000, 27000)'


  * filename = input299.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 25700) -> (7300, 31650)'


==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(7141, 3392) -> (10144, 3392) -> (19672, 3392) -> (20220, 3392)'


    - failed on trial 1 of 500
     4
      7141  3392
     10144  3392
     19672  3392
     20220  3392

  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including:
      '(14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)'


  * filename = vertical25.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 25
    - 25 missing entries in student solution, including:
      '(19953, 10489) -> (19953, 10688) -> (19953, 19299) -> (19953, 20439)'


  * filename = vertical50.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 50
    - 50 missing entries in student solution, including:
      '(5991, 15606) -> (5991, 20227) -> (5991, 20340) -> (5991, 20424)'


  * filename = vertical75.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 75
    - 75 missing entries in student solution, including:
      '(13780, 16365) -> (13780, 17494) -> (13780, 18253) -> (13780, 18908)'


  * filename = vertical100.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 100
    - 100 missing entries in student solution, including:
      '(15135, 15588) -> (15135, 17398) -> (15135, 19476) -> (15135, 20439)'


==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(11572, 3455) -> (11572, 7906) -> (11572, 8123) -> (11572, 11243)'


    - failed on trial 1 of 500
     4
     11572  3455
     11572  7906
     11572 11243
     11572  8123

  *  5 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including:
      '(13580, 12626) -> (13580, 12990) -> (13580, 14898) -> (13580, 15672)'


    - failed on trial 1 of 250
     20
     10054 13057
     14992  2618
     14992 15253
     16722 16616
     14992 17743
     13580 12626
     20845 14436
     16722 15961
     16722 10345
     13580 15672
     20845 17126
     10054  1829
     10054 20179
     13580 12990
     16722 17559
     10054  2207
     20845  9384
     20845 18432
     14992 13687
     13580 14898

  * 10 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including:
      '(1065, 11654) -> (1065, 15774) -> (1065, 16453) -> (1065, 19891)'


    - failed on trial 1 of 50

  * 15 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including:
      '(20668, 11256) -> (20668, 11593) -> (20668, 12384) -> (20668, 12571)'


    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 1000) -> (8000, 8000)
    - reference segment 0: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 1
    - 6 extra entries in student solution, including:
      '(2000, 2000) -> (9000, 9000)'

    - 1 missing entry in student solution:
      '(1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)'


  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 18000) -> (3500, 28000)
    - reference segment 1: (1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 2
    - 2 extra entries in student solution, including:
      '(2000, 22000) -> (4000, 30000)'

    - 1 missing entry in student solution:
      '(1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)'


  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5120, 29184) -> (8192, 29184)
    - reference segment 2: (4160, 29184) -> (5120, 29184) -> (6144, 29184) -> (7168, 29184) -> (8192, 29184)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 5
    - 7 extra entries in student solution, including:
      '(5120, 29184) -> (8192, 29184)'

    - 2 missing entries in student solution, including:
      '(8192, 25088) -> (8192, 26112) -> (8192, 27136) -> (8192, 28160) -> (8192, 29184)'


  * filename = input50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1000, 9000) -> (1000, 26000)
    - reference segment 5: (1000, 2000) -> (1000, 9000) -> (1000, 13000) -> (1000, 23000) -> (1000, 26000)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 7
    - 3 extra entries in student solution, including:
      '(18000, 23000) -> (18000, 30000)'


  * filename = input80.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2000, 6000) -> (17000, 21000)
    - reference segment 17: (2000, 6000) -> (5000, 9000) -> (9000, 13000) -> (17000, 21000) -> (25000, 29000) -> (27000, 31000)

    - number of entries in student   solution: 37
    - number of entries in reference solution: 31
    - 14 extra entries in student solution, including:
      '(8000, 23000) -> (30000, 23000)'

    - 8 missing entries in student solution, including:
      '(29000, 14000) -> (29000, 18000) -> (29000, 24000) -> (29000, 31000)'


  * filename = input300.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7300, 10050) -> (7300, 25700)
    - reference segment 5: (7300, 10050) -> (7300, 10450) -> (7300, 17000) -> (7300, 25700) -> (7300, 31650)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 2 extra entries in student solution, including:
      '(7300, 10450) -> (7300, 31650)'

    - 2 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 17000) -> (7300, 25700) -> (7300, 31650)'


  * filename = inarow.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 5000) -> (0, 15000)
    - reference segment 4: (0, 0) -> (0, 5000) -> (0, 10000) -> (0, 11000) -> (0, 15000) -> (0, 20000) -> (0, 25000) -> (0, 30000)

    - number of entries in student   solution: 16
    - number of entries in reference solution: 5
    - 11 extra entries in student solution, including:
      '(0, 5000) -> (0, 30000)'


==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (15979, 30308) -> (14764, 30467)
    - reference segment 104: (16384, 30255) -> (15979, 30308) -> (15574, 30361) -> (15169, 30414) -> (14764, 30467)

    - number of entries in student   solution: 1090
    - number of entries in reference solution: 288
    - 807 extra entries in student solution, including:
      '(12652, 30395) -> (14236, 30449)'

    - 5 missing entries in student solution, including:
      '(16743, 17095) -> (16743, 17271) -> (16743, 17447) -> (16743, 17623)'


  * filename = rs1423.txt
    - number of entries in student   solution: 442
    - number of entries in reference solution: 443
    - 1 missing entry in student solution:
      '(15294, 17325) -> (15294, 17358) -> (15294, 17391) -> (15294, 17424)'


==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(18000, 13000) -> (18000, 23000) -> (18000, 26000) -> (18000, 27000)'


  * filename = input299.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 25700) -> (7300, 31650)'


==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including:
      '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 6
    - 5 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'



It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(8606, 2268) -> (10544, 5422) -> (11564, 7082) -> (11870, 7580)'


    - failed on trial 1 of 500
     4
     10544  5422
     11564  7082
     11870  7580
      8606  2268

  *  5 random line segments
    - number of entries in student   solution: 4
    - number of entries in reference solution: 5
    - 1 missing entry in student solution:
      '(12519, 6751) -> (14082, 8098) -> (18771, 12139) -> (19292, 12588)'


    - failed on trial 1 of 500
     20
      1341 12334
      4173 11834
      5394 12359
       103 10084
      7267  5709
      3521  9595
     18771 12139
      9521 10699
     12519  6751
     10421 14014
      8401  8019
     19292 12588
      1795 12418
      4810   704
     14082  8098
     10685 14634
      6700  4554
      6521 10147
      8605 13678
     11521 11067

  * 25 random line segments
    - number of entries in student   solution: 24
    - number of entries in reference solution: 25
    - 1 missing entry in student solution:
      '(14315, 1419) -> (14423, 10743) -> (14429, 11261) -> (14507, 17995)'


    - failed on trial 5 of 100

  * 50 random line segments
    - number of entries in student   solution: 49
    - number of entries in reference solution: 50
    - 1 missing entry in student solution:
      '(5383, 3159) -> (5392, 4272) -> (5407, 6127) -> (5410, 6498)'


    - failed on trial 3 of 15

  * 100 random line segments
    - number of entries in student   solution: 99
    - number of entries in reference solution: 100
    - 1 missing entry in student solution:
      '(14177, 1091) -> (14183, 2471) -> (14189, 3851) -> (14195, 5231)'


    - failed on trial 1 of 2

==> FAILED

Test 10: random line segments
  *  1 random line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(6048, 5090) -> (7161, 9277) -> (7623, 11015) -> (7896, 12042)'


    - failed on trial 1 of 500
     4
      7896 12042
      7161  9277
      7623 11015
      6048  5090

  *  5 random line segments
    - number of entries in student   solution: 3
    - number of entries in reference solution: 5
    - 2 missing entries in student solution, including:
      '(7734, 11517) -> (7734, 11557) -> (7734, 12077) -> (7734, 12207)'


    - failed on trial 2 of 500
     20
      5124  3952
     13827  6073
     13827  3253
     12406  8684
     10679 10459
     13798 10412
      4844  3860
      8168  8940
      7734 12207
     10724  6596
     13827  3973
     10514  5723
     12137 11341
      7734 12077
     13827  6193
      7734 11517
      4424  3722
      7277  8401
      7734 11557
      9332  4868

  * 25 random line segments
    - number of entries in student   solution: 24
    - number of entries in reference solution: 25
    - 1 missing entry in student solution:
      '(13842, 4982) -> (13842, 6089) -> (13842, 7893) -> (13842, 8631)'


    - failed on trial 1 of 100

  * 50 random line segments
    - number of entries in student   solution: 44
    - number of entries in reference solution: 50
    - 6 missing entries in student solution, including:
      '(13007, 10746) -> (13007, 10955) -> (13007, 11560) -> (13007, 11681)'


    - failed on trial 1 of 15

  * 100 random line segments
    - number of entries in student   solution: 93
    - number of entries in reference solution: 100
    - 7 missing entries in student solution, including:
      '(7169, 11456) -> (7169, 11626) -> (7169, 12850) -> (7169, 14346)'


    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(7, 0) -> (7, 2) -> (7, 3) -> (7, 4)'


    - failed on trial 19 of 500
     5
         7     2
         7     0
         5     1
         7     3
         7     4

  * 10 random points in a 10-by-10 grid
    - number of entries in student   solution: 1
    - number of entries in reference solution: 2
    - 1 missing entry in student solution:
      '(4, 1) -> (4, 4) -> (4, 7) -> (4, 8)'


    - failed on trial 3 of 500
     10
         4     8
         6     6
         5     3
         8     0
         6     4
         0     8
         4     7
         4     4
         2     5
         4     1

  * 50 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6, 2) -> (1, 7)
    - reference segment 5: (8, 0) -> (6, 2) -> (5, 3) -> (4, 4) -> (3, 5) -> (1, 7) -> (0, 8)

    - number of entries in student   solution: 112
    - number of entries in reference solution: 40
    - 76 extra entries in student solution, including:
      '(5, 8) -> (9, 8)'

    - 4 missing entries in student solution, including:
      '(6, 2) -> (6, 3) -> (6, 5) -> (6, 6) -> (6, 7)'


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 4) -> (3, 4)
    - reference segment 57: (0, 4) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4) -> (5, 4) -> (6, 4) -> (7, 4)

    - number of entries in student   solution: 537
    - number of entries in reference solution: 125
    - 415 extra entries in student solution, including:
      '(0, 9) -> (7, 9)'

    - 3 missing entries in student solution, including:
      '(7, 0) -> (7, 1) -> (7, 3) -> (7, 4) -> (7, 5) -> (7, 6) -> (7, 7) -> (7, 8) -> (7, 9)'


    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (17, 3) -> (49, 3)
    - reference segment 66: (7, 3) -> (17, 3) -> (19, 3) -> (20, 3) -> (49, 3)

    - number of entries in student   solution: 411
    - number of entries in reference solution: 216
    - 213 extra entries in student solution, including:
      '(13, 49) -> (46, 49)'

    - 18 missing entries in student solution, including:
      '(37, 20) -> (37, 28) -> (37, 29) -> (37, 42) -> (37, 44)'


    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    - number of entries in student   solution: 6
    - number of entries in reference solution: 10
    - 4 missing entries in student solution, including:
      '(3, 0) -> (3, 1) -> (3, 2) -> (3, 3)'


  * 5-by-5 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4, 0) -> (1, 3)
    - reference segment 1: (4, 0) -> (3, 1) -> (2, 2) -> (1, 3) -> (0, 4)

    - number of entries in student   solution: 33
    - number of entries in reference solution: 16
    - 17 extra entries in student solution, including:
      '(1, 4) -> (4, 4)'


  * 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4, 6) -> (7, 6)
    - reference segment 73: (0, 6) -> (1, 6) -> (2, 6) -> (3, 6) -> (4, 6) -> (5, 6) -> (6, 6) -> (7, 6) -> (8, 6) -> (9, 6)

    - number of entries in student   solution: 676
    - number of entries in reference solution: 154
    - 523 extra entries in student solution, including:
      '(4, 9) -> (9, 9)'

    - 1 missing entry in student solution:
      '(8, 0) -> (8, 1) -> (8, 2) -> (8, 3) -> (8, 4) -> (8, 5) -> (8, 6) -> (8, 7) -> (8, 8) -> (8, 9)'


  * 20-by-20 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4, 2) -> (13, 11)
    - reference segment 1822: (2, 0) -> (3, 1) -> (4, 2) -> (5, 3) -> (6, 4) -> (7, 5) -> (8, 6) -> (9, 7) -> (10, 8) -> (11, 9) -> (12, 10) -> (13, 11) -> (14, 12) -> (15, 13) -> (16, 14) -> (17, 15) -> (18, 16) -> (19, 17)

    - number of entries in student   solution: 10558
    - number of entries in reference solution: 2446
    - 8116 extra entries in student solution, including:
      '(14, 19) -> (19, 19)'

    - 4 missing entries in student solution, including:
      '(15, 0) -> (15, 1) -> (15, 2) -> (15, 3) -> (15, 4) -> (15, 5) -> (15, 6) -> (15, 7) -> (15, 8) -> (15, 9) -> (15, 10) -> (15, 11) -> (15, 12) -> (15, 13) -> (15, 14) -> (15, 15) -> (15, 16) -> (15, 17) -> (15, 18) -> (15, 19)'


  * 5-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1, 1) -> (4, 1)
    - reference segment 3: (0, 1) -> (1, 1) -> (2, 1) -> (3, 1) -> (4, 1)

    - number of entries in student   solution: 13
    - number of entries in reference solution: 13
    - 5 extra entries in student solution, including:
      '(0, 3) -> (3, 3)'

    - 5 missing entries in student solution, including:
      '(4, 0) -> (4, 1) -> (4, 2) -> (4, 3)'


  * 6-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1, 2) -> (4, 2)
    - reference segment 5: (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (4, 2) -> (5, 2)

    - number of entries in student   solution: 21
    - number of entries in reference solution: 16
    - 11 extra entries in student solution, including:
      '(2, 3) -> (5, 3)'

    - 6 missing entries in student solution, including:
      '(5, 0) -> (5, 1) -> (5, 2) -> (5, 3)'


  * 10-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5, 2) -> (8, 2)
    - reference segment 14: (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (4, 2) -> (5, 2) -> (6, 2) -> (7, 2) -> (8, 2) -> (9, 2)

    - number of entries in student   solution: 92
    - number of entries in reference solution: 38
    - 64 extra entries in student solution, including:
      '(6, 3) -> (9, 3)'

    - 10 missing entries in student solution, including:
      '(9, 0) -> (9, 1) -> (9, 2) -> (9, 3)'


  * 15-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9, 1) -> (12, 1)
    - reference segment 31: (0, 1) -> (1, 1) -> (2, 1) -> (3, 1) -> (4, 1) -> (5, 1) -> (6, 1) -> (7, 1) -> (8, 1) -> (9, 1) -> (10, 1) -> (11, 1) -> (12, 1) -> (13, 1) -> (14, 1)

    - number of entries in student   solution: 224
    - number of entries in reference solution: 79
    - 160 extra entries in student solution, including:
      '(9, 3) -> (14, 3)'

    - 15 missing entries in student solution, including:
      '(14, 0) -> (14, 1) -> (14, 2) -> (14, 3)'


  * 25-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (3, 1) -> (22, 1)
    - reference segment 93: (0, 1) -> (1, 1) -> (2, 1) -> (3, 1) -> (4, 1) -> (5, 1) -> (6, 1) -> (7, 1) -> (8, 1) -> (9, 1) -> (10, 1) -> (11, 1) -> (12, 1) -> (13, 1) -> (14, 1) -> (15, 1) -> (16, 1) -> (17, 1) -> (18, 1) -> (19, 1) -> (20, 1) -> (21, 1) -> (22, 1) -> (23, 1) -> (24, 1)

    - number of entries in student   solution: 733
    - number of entries in reference solution: 213
    - 545 extra entries in student solution, including:
      '(20, 3) -> (24, 3)'

    - 25 missing entries in student solution, including:
      '(24, 0) -> (24, 1) -> (24, 2) -> (24, 3)'


==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
      6829  5817
     null
     28890 21194
     30288 18272
     26027 17010
     31548 18377
     22323 27033
     24305 20469
      3220  8856
     30615 14848

  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     4
      2640  5995
     16695 27417
     null
      5880 23390

  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     2
      2658 22922
     null

  * Point[] of length 1, number of null entries = 1
==> FAILED

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     4
     28306 22400
     17452  6458
     28306 22400
     17210  2162

  * 3 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     3
      5765  9514
      2933  5603
      5765  9514

  * 2 points
    - failed on trial 1 of 100
    - constructor fails to throw a java.lang.IllegalArgumentException when passed duplicate points

     2
     17595 24359
     17595 24359

==> FAILED


Total: 7/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
